
services:
  # Database
  db:
    image: postgres:15
    container_name: travel_db
    environment:
      POSTGRES_DB: travel_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: travel_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
  # Langflow
  langflow:
    image: langflowai/langflow:latest
    container_name: langflow
    ports:
      - "8080:8080"
    volumes:
      - langflow_data:/app/.langflow
      - langflow_flows:/root/.langflow
      - langflow_logs:/tmp/langflow
    environment:
      - LANGFLOW_PORT=8080
      - LANGFLOW_AUTO_LOGIN=true
      - LANGFLOW_STORE_ENVIRONMENT_VARIABLES=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
  # Flow uploader (initialize Langflow with custom flow)
  uploader:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      langflow:
        condition: service_healthy
    environment:
      - LANGFLOW_HOST=http://langflow:8080
      - FLOW_FILE_PATH=/app/TravelMate.json
    volumes:
      - ./custom/TravelMate.json:/app/TravelMate.json
      - ./manage_flow.py:/app/manage_flow.py
      - flow_data:/app/data
    restart: "no"
    command: python manage_flow.py
  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: travel_backend
    ports:
      - "8000:8000"
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://postgres:password@db:5432/travel_db
      - REDIS_URL=redis://redis:6379/0
      - LANGFLOW_HOST=http://langflow:8080
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      langflow:
        condition: service_healthy
      uploader:
        condition: service_completed_successfully
    volumes:
      - ./backend:/app
      - flow_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: travel_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  langflow_data:
  langflow_flows:
  langflow_logs:
  flow_data:
  postgres_data:
  redis_data:
